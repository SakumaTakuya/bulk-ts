// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma" // Updated output path
}

datasource db {
  provider = "postgresql" // Neon uses the PostgreSQL protocol
  url      = env("DATABASE_URL")
}

// --- Authentication Models (NextAuth.js) ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // App-specific relations
  exercises   Exercise[]
  workoutLogs WorkoutLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- App-Specific Models ---

model Exercise {
  id   String @id @default(cuid())
  name String // Name is unique per user, not globally

  userId String // Required: Each exercise belongs to a user
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // If user deleted, their exercises are deleted

  workoutLogs WorkoutLog[] // Relation to workout logs using this exercise

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name]) // Ensure exercise name is unique for each user
}

model WorkoutLog {
  id   String   @id @default(cuid())
  date DateTime // Date of the workout

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // If user deleted, logs are deleted

  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade) // Each workout log is for one exercise

  sets Set[] // Relation to the sets performed in this log

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date]) // Index for efficient querying by user and date
  @@index([exerciseId])
}

model Set {
  id     String @id @default(cuid())
  reps   Int
  weight Float // Use Float for weight (e.g., 10.5 kg)

  workoutLogId String
  workoutLog   WorkoutLog @relation(fields: [workoutLogId], references: [id], onDelete: Cascade) // If log deleted, sets are deleted

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workoutLogId])
}
