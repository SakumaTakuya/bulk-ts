# 1. APIの推奨利用
- ライブラリやフレームワークが提供する推奨API（例: next-intlのhasLocale）を優先的に利用すること。

# 2. コードの簡潔性
- 不要なreturnや副作用のないコードは極力省略し、簡潔な実装を心がけること。

# 3. フィードバックの即時反映
- レビューやユーザーフィードバックを受けた際は、速やかに内容を反映し再実装・修正を行うこと。
- コード修正後は必ずlint/typeチェックを実施し、未使用変数や型エラーも同時に解消すること。

# 4. フォールバック処理の明確化
- サポート外の値や異常系の場合は、明示的にデフォルト値やフォールバック先を指定すること。

# 5. コメントの最小化
- コードの意図が明確な場合は過剰なコメントを避け、必要最小限の説明に留めること。

# 6. 冗長なimportの禁止
- 使用しないimportや重複するimportは記述しないこと。

# 7. 一貫した判定ロジック
- 配列の判定や条件分岐は、プロジェクト全体で一貫したロジック（例: includesではなくhasLocale）を用いること。

# 8. UI・レイアウト改善時のルール
- UI配置やレイアウト変更時は、ユーザーフィードバックを優先し、即時に反映すること。
- サジェストや補助UIの配色・hover/focus時の表示制御は、既存UIコンポーネント（例: Select）と一貫性を持たせること。
- サジェストや補助UIは、入力欄がfocusしている時のみ表示し、ユーザー体験を損なわないようにすること。
- レイアウト調整では、要素のサイズ・位置・固定表示（fixed/flex等）を明確に指定し、意図しない重なりや隠れを防ぐこと。
- JSX構造エラー（親要素不足等）が発生しないよう、複数要素を返す場合は必ずFragmentや親divでラップすること。
- レイアウト変更時は、既存要素の可視性・操作性が損なわれないようpaddingやmargin等でスペースを確保すること。
- コード修正後は、.clinerulesの既存ルール（簡潔性・一貫性・不要なコメント排除等）も再確認し、全体の整合性を保つこと。
